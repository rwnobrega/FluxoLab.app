Language {
  Expression
    = Expression "||" Expression0  --binary
    | Expression0

  Expression0
    = Expression0 "&&" Expression1 --binary
    | Expression1

  Expression1
    = Expression2 ("<=" | "<" | ">=" | ">" | "==" | "!=") Expression2  --binary
    | Expression2

  Expression2
  	= Expression2 ("+" | "-") Expression3  --binary
  	| Expression3

  Expression3
  	= Expression3 ("*" | "/" | div | mod) Expression4  --binary
    | Expression4

  Expression4
    = ("+" | "-" | "!") Expression4  --unary
    | Primary

  FunctionCall = identifier "(" ListOf<Expression, ","> ")"

  Parentheses = "(" Expression ")"

  Primary
    = stringLiteral  --stringLiteral
    | numberLiteral  --numberLiteral
    | booleanLiteral  --booleanLiteral
    | FunctionCall
    | constant  --constant
    | identifier  --identifier
    | Parentheses

  read = "read" ~alnum
  write = "write" ~alnum
  true = "true" ~alnum
  false = "false" ~alnum
  div = "div" ~alnum
  mod = "mod" ~alnum

  pi = "pi" ~alnum
  tau = "tau" ~alnum

  keyword = true | false | div | mod | read | write | pi | tau

  identifier = ~keyword (letter | "_") (alnum | "_")*
  constant = pi | tau

  stringLiteral = "\"" character* "\""
  character = "\\\""
            | ~"\"" ~"\n" any

  numberLiteral = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  booleanLiteral = true | false
}
