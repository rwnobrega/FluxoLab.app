Language {
  Command
    = identifier "=" Expression  --assignment
    | read identifier  --read
    | write NonemptyListOf<Expression, ",">  --write

  Expression
    = Expression "||" Expression0  --binary
    | Expression0

  Expression0
    = Expression0 "&&" Expression1 --binary
    | Expression1

  Expression1
    = Expression2 ("<=" | "<" | ">=" | ">" | "==" | "!=") Expression2  --binary
    | Expression2

  Expression2
  	= Expression2 ("+" | "-") Expression3  --binary
  	| Expression3

  Expression3
  	= Expression3 ("*" | "/" | div | mod) Expression4  --binary
    | Expression4

  Expression4 ([[Syntax_Expression]])
    = ("+" | "-" | "!") Expression4  --unary
    | Primary

  FunctionCall (([[Syntax_FunctionCall]])
    = identifier "(" ListOf<Expression, ","> ")"

  Parentheses ([[Syntax_Parentheses]])
    = "(" Expression ")"

  Primary
    = stringLiteral  --stringLiteral
    | numberLiteral  --numberLiteral
    | booleanLiteral  --booleanLiteral
    | FunctionCall
    | constant  --constant
    | identifier  --identifier
    | Parentheses

  read = "read" ~alnum
  write = "write" ~alnum
  true = "true" ~alnum
  false = "false" ~alnum
  div = "div" ~alnum
  mod = "mod" ~alnum
  pi = "pi" ~alnum
  tau = "tau" ~alnum

  keyword ([[Syntax_Keyword]])
    = true | false | div | mod | read | write | pi | tau

  identifier ([[Syntax_Identifier]])
    = ~keyword (letter | "_") (alnum | "_")*

  constant ([[Syntax_Constant]])
    = pi | tau

  stringLiteral ([[Syntax_StringLiteral]])
    = "\"" ("\\\"" | ~"\"" ~"\n" any)* "\""

  numberLiteral ([[Syntax_NumberLiteral]])
    = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  booleanLiteral ([[Syntax_BooleanLiteral]])
    = true | false
}
